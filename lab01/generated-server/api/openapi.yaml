openapi: 3.0.2
info:
  title: Film Library API
  version: "1.0"
servers:
- url: /
paths:
  /api:
    get:
      summary: Get all endpoints
      description: Get all endpoints
      operationId: apiGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/endpoint'
                x-content-type: application/json
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Default
  /api/films:
    get:
      summary: Get all films (publics + privates)
      description: Get all films (publics + privates)
      operationId: apiFilmsGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
    post:
      summary: Add a new film
      description: Add a new film
      operationId: apiFilmsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/film'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
  /api/films/{filmId}:
    get:
      summary: Get a film by id
      description: Get a film by id
      operationId: apiFilmsFilmIdGET
      parameters:
      - name: filmId
        in: path
        description: The id of the film to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
    put:
      summary: Update a film by id
      description: Update a film by id
      operationId: apiFilmsFilmIdPUT
      parameters:
      - name: filmId
        in: path
        description: The id of the film to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/film'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
    delete:
      summary: Delete a film by id
      description: Delete a film by id
      operationId: apiFilmsFilmIdDELETE
      parameters:
      - name: filmId
        in: path
        description: The id of the film to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
  /api/films/public/{filmId}/reviews:
    get:
      summary: Get all reviews for a film
      description: Get all reviews for a film
      operationId: apiFilmsPublicFilmIdReviewsGET
      parameters:
      - name: filmId
        in: path
        description: The id of the film to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/review'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Default
  /api/films/public:
    get:
      summary: Get all public films
      description: Get all public films
      operationId: apiFilmsPublicGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Default
  /api/films/public/{id}:
    get:
      summary: Get a public film by id
      description: Get a public film by id
      operationId: apiFilmsPublicIdGET
      parameters:
      - name: id
        in: path
        description: The id of the film to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Default
  /api/users:
    get:
      summary: Get all users
      description: Get all users
      operationId: apiUsersGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
  /api/users/{usersId}/films:
    get:
      summary: Get all films for a user
      description: Get all films for a user
      operationId: apiUsersUsersIdFilmsGET
      parameters:
      - name: usersId
        in: path
        description: The id of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
  /api/auth:
    get:
      summary: get current session
      description: get current session
      operationId: apiAuthGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
    post:
      summary: Login
      description: Login
      operationId: apiAuthPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Default
    delete:
      summary: logout
      description: logout
      operationId: apiAuthDELETE
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
  /api/reviews:
    post:
      summary: Assign a new review to a user
      description: Assign a new review to a user
      operationId: apiReviewsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/review'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/review'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
  /api/reviews/{reviewId}:
    get:
      summary: Get a review by id
      description: Get a review by id
      operationId: apiReviewsReviewIdGET
      parameters:
      - name: reviewId
        in: path
        description: The id of the review to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Default
    put:
      summary: Update a review by id
      description: Update a review by id
      operationId: apiReviewsReviewIdPUT
      parameters:
      - name: reviewId
        in: path
        description: The id of the review to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/review'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/review'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
    delete:
      summary: Delete a review by id
      description: Delete a review by id
      operationId: apiReviewsReviewIdDELETE
      parameters:
      - name: reviewId
        in: path
        description: The id of the review to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - cookieAuth: []
      x-swagger-router-controller: Default
components:
  schemas:
    endpoint:
      type: object
      properties:
        path:
          type: string
        methods:
          type: array
          items:
            type: string
      example:
        path: path
        methods:
        - methods
        - methods
    user:
      required:
      - email
      - name
      - password
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
      example:
        password: password
        name: name
        id: id
        email: email
    film:
      required:
      - description
      - owner
      - private
      - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        owner:
          $ref: '#/components/schemas/user'
        private:
          type: boolean
        watchDate:
          $ref: '#/components/schemas/date'
        description:
          type: string
        rating:
          maximum: 10
          minimum: 0
          type: number
        favorite:
          type: boolean
          default: false
      example:
        owner:
          password: password
          name: name
          id: id
          email: email
        private: true
        watchDate: watchDate
        rating: 0.8008281904610115
        description: description
        id: id
        title: title
        favorite: false
    review:
      required:
      - completed
      - filmId
      - id
      - reviewer
      type: object
      properties:
        id:
          type: string
        reviewer:
          $ref: '#/components/schemas/user'
        filmId:
          $ref: '#/components/schemas/film'
        rating:
          maximum: 10
          minimum: 0
          type: number
        review:
          type: string
        completed:
          type: boolean
          default: false
        reviewDate:
          $ref: '#/components/schemas/date'
      example:
        reviewDate: reviewDate
        review: review
        filmId:
          owner:
            password: password
            name: name
            id: id
            email: email
          private: true
          watchDate: watchDate
          rating: 0.8008281904610115
          description: description
          id: id
          title: title
          favorite: false
        rating: 0.8008281904610115
        id: id
        reviewer:
          password: password
          name: name
          id: id
          email: email
        completed: false
    auth:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        token:
          type: string
      example:
        user:
          password: password
          name: name
          id: id
          email: email
        token: token
    date:
      pattern: "^(0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](19|20)\\d\\d$"
      type: string
    email:
      pattern: "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
      type: string
    password:
      pattern: "^.{6,20}$"
      type: string
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: session
      in: cookie
